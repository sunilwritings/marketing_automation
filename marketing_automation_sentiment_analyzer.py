# -*- coding: utf-8 -*-
"""marketing_automation_sentiment_analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MnS3nehh6wlxBNzbNthTGsL8HKy5GXkD
"""

#importing libraries
import requests
import json
#using NLTK library sentiment analysis
from nltk.sentiment import SentimentIntensityAnalyzer

#creating a function to automate connect request
def generate_connection_request(access_token, profile_id):
  #using try and exceprt to handle HTTP, exception,key errors
    try:
        #Set up the API endpoint to retrieve profile data
        url = f"https://api.linkedin.com/v2/people/{profile_id}?projection=(id,about,positions:(title),activities:(post:(title,created)))"

        #Set the Authorization header with the access token
        headers = {
            "Authorization": f"Bearer {access_token}",
            "Content-Type": "application/json",
            "X-Restli-Protocol-Version": "2.0.0"
        }

        #Send GET request to retrieve the profile data
        response = requests.get(url, headers=headers)
        response.raise_for_status()  # Raise an exception if the request was not successful (status code other than 2xx)

        if response.status_code == 200:
            #Parse the response
            profile_data = response.json()

            #Extract relevant information from the profile data

            #Here we are retreiving summary of the profile, positions and activities in linkedin page
            profile_about = profile_data.get("about", {}).get("summary")
            positions = profile_data.get("positions", {}).get("elements", [])
            activities = profile_data.get("activities", {}).get("elements", [])

            #Generate personalized message based on the extracted information
            message_template = "Hello [name], I noticed that you are a [job_title] at [company]. Your recent post on [post_title] caught my attention. "

            #Sentiment analysis
            #using sentiment analyzer library to get sentiment of summary of profile
            sentiment_analyzer = SentimentIntensityAnalyzer()
            #getting the polarity scores
            about_sentiment = sentiment_analyzer.polarity_scores(profile_about)["compound"]

            #If the sentiment score greater than 0.5 then we will consider this as positive sentiment
            if about_sentiment >= 0.5:
                message_template += "'About Us' section reflects a positive sentiment. "
            #If the sentiment score less than 0.5 then we will consider this as negative sentiment
            elif about_sentiment <= -0.5:
                message_template += "'About Us' section reflects a negative sentiment. "
            #If the sentiment score less than 0.5 then we will consider this as neural sentiment
            else:
                message_template += "'About Us' section reflects a neutral sentiment. "

        #handling errors

        else:
            print(f"Error: {response.status_code} - {response.text}")

    except requests.exceptions.RequestException as e:
        print(f"Request Error: {e}")
    except json.JSONDecodeError as e:
        print(f"JSON Decode Error: {e}")
    except KeyError as e:
        print(f"Key Error: {e}")
    except requests.exceptions.HTTPError as e:
        print(f"HTTP Error: {e}")

# enter token details and profile id
access_token = "<your_access_token>"
profile_id = "<connection_profile_id>"
generate_connection_request(access_token, profile_id)